name: Create Release

on:
  push:
    branches:
      - release  # Trigger the workflow on push events to the main branch
  workflow_run:
    workflows: ["Windows x64 Release Build", "Linux amd64 Release Build"]
    types:
      - completed

jobs:
  release:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get the latest tag
      id: get_tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0)
        echo "Latest tag: $latest_tag"
        # Extract version number (assuming tags follow semantic versioning)
        if [ -z "$latest_tag" ]; then
          echo "::set-output name=new_tag::v1.0.0"
        else
          major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
          echo "::set-output name=new_tag::$new_tag"
        fi
      shell: bash

    - name: Restore Windows x64 From Cache
      uses: actions/cache@v3
      with:
        path: ./windows
        key: windows-app-build-${{ github.sha }}
        enableCrossOsArchive: true
        fail-on-cache-miss: true

    - name: Restore Linux amd64 From Cache
      uses: actions/cache@v3
      with:
        path: ./linux
        key: linux-amd64-app-build-${{ github.sha }}
        enableCrossOsArchive: true
        fail-on-cache-miss: true

    - name: Verify Restored Binaries
      run: |
        echo "Listing files in ./windows and ./linux:"
        ls -l ./windows
        ls -l ./linux

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.new_tag }}
        release_name: Tritime ${{ steps.get_tag.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Windows Artifact to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./
        asset_name: tritime-win64.zip
        asset_content_type: application/zip

    - name: Upload Linux Artifact to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./
        asset_name: tritime-linux-amd64.tar.gz
        asset_content_type: application/tgz
